{"version":3,"sources":["componets/Display.tsx","componets/ButtonPanel.tsx","App.tsx","serviceWorker.ts","index.tsx","store.tsx"],"names":["Display","result","calculation","className","ButtonPanel","handleClick","map","value","i","key","id","data-value","onClick","App","store","state","React","Component","observer","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","Store","exampleForTest","sentence","eval","event","dataValue","target","dataset","calc","calculate","endsWith","length","slice","this","ex","decorate","observable","computed"],"mappings":"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","file":"static/js/main.60eed3e1.chunk.js","sourcesContent":["import React from 'react';\r\n\r\ntype DisplayProps = { \r\n  result?: number;\r\n  calculation?: string;  \r\n}\r\n\r\nconst Display = ({ result = 0 , calculation = \"0\"}: DisplayProps) => {\r\n\r\n  return (\r\n    <div className=\"display\">\r\n      <div className=\"result display-value\">{result}</div>\r\n      <div className=\"calculation display-value\">{calculation}</div>\r\n    </div>\r\n  )\r\n}\r\n\r\n\r\nexport default Display;","import React from 'react';\r\n\r\n\r\n\r\nconst ButtonPanel = ( { handleClick }: any ) => {\r\n\r\n    let buttonValues: string[] = [\"AC\", \"‚Üê\", \"/\", \"7\", \"8\", \"9\", \"*\", \"4\", \"5\", \"6\", \"-\",\r\n\"3\", \"2\", \"1\", \"+\", \"0\", \".\", \"=\"];\r\n\r\n    return (\r\n        <div className=\"button-panel\" >\r\n          {buttonValues.map( (value, i)  => (\r\n              <div key={i} className={`button ${ value === \"AC\" ? \"AC\" : value === \"=\" ? \"equal\" : \"\"}`}>\r\n                <button id={ value === \"=\" ? \"equals\" : value === \"0\" ? \"zero\" : value === \"1\" ? \"one\" : value === \"2\" ? \"two\" : value === \"3\" ? \"three\" : value === \"4\" ? \"four\" : value === \"5\" ? \"five\" : value === \"6\" ? \"six\" : value === \"7\" ? \"seven\" : value === \"8\" ? \"eight\" : value === \"9\" ? \"nine\" : value === \"+\" ? \"add\" : value === \"-\" ? \"subtract\" : value === \"*\" ? \"multiply\" : value === \"/\" ? \"divide\" : value === \".\" ? \"decimal\" : \"\"} data-value={value} onClick={handleClick} >{value}</button>\r\n              </div>\r\n              \r\n          )\r\n          )}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ButtonPanel;","import React from 'react';\r\nimport { observer } from 'mobx-react';\r\n\r\nimport store from './store';\r\nimport Display from './componets/Display';\r\nimport ButtonPanel from './componets/ButtonPanel';\r\nimport './App.css';\r\n\r\n\r\n\r\nclass App extends React.Component {\r\n \r\n  render() {\r\n\r\n    return (\r\n      <div className=\"App col\">\r\n        <Display  result={store.state.result} calculation={store.state.calculation} />\r\n        <ButtonPanel  handleClick={store.handleClick} />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default observer(App);\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\n\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n","import { observable, decorate, computed } from 'mobx';\r\n\r\nclass Store {\r\n  state = {\r\n    result: 0,\r\n    calculation: \"0\"\r\n  }\r\n  \r\n  get calculate(): number {\r\n    let calc = this.state.calculation;\r\n    if( calc.endsWith(\"/\") || calc.endsWith(\"*\") || calc.endsWith(\"-\") || calc.endsWith(\"+\") || calc.endsWith(\".\") ) {\r\n      //eslint-disable-next-line\r\n      let ex = eval(calc.slice(0,-1));\r\n      return ex;\r\n    }\r\n    \r\n    //eslint-disable-next-line\r\n    return eval(calc)\r\n  }\r\n  exampleForTest = (sentence: string): number => {\r\n    // eslint-disable-next-line\r\n    return eval(sentence);\r\n  }\r\n\r\n  handleClick = (event) => {\r\n    let dataValue = event.target.dataset.value;\r\n    let calc = this.state.calculation;\r\n    switch(true) {\r\n      case dataValue === \"AC\": \r\n        this.state.result = 0;\r\n        this.state.calculation = \"0\";\r\n        break;\r\n      case dataValue === \"=\":\r\n        this.state.result = this.calculate;\r\n        this.state.calculation = \"0\";\r\n        break;\r\n      case (+dataValue >= 0 && +dataValue <= 9 ): \r\n          this.state.calculation = calc === \"0\" ?  dataValue : calc + dataValue\r\n        break;\r\n      case (dataValue === \".\"):\r\n          this.state.calculation = (calc.endsWith(\"*\" || \"-\" || \"+\" || \"/\")) ? calc : calc + dataValue\r\n        break;\r\n      case (dataValue === \"*\" || dataValue === \"+\" || dataValue === \"/\"):\r\n        this.state.calculation = (calc !== \"0\" && !calc.endsWith(\"/\") && !calc.endsWith(\"*\") && !calc.endsWith(\"-\") && !calc.endsWith(\"+\") && !calc.endsWith(\".\") ) ? calc + dataValue : calc;\r\n        break;\r\n      case (dataValue === \"-\"):\r\n        this.state.calculation = calc + dataValue;\r\n        break;\r\n      case (dataValue === \"‚Üê\"):\r\n        this.state.calculation = calc.length !== 1 ? calc.slice(0,-1) : \"0\";\r\n        break;\r\n    }\r\n  }\r\n} \r\n\r\ndecorate(Store, {\r\n  state: observable,\r\n  calculate: computed\r\n})\r\n\r\nexport default new Store();"],"sourceRoot":""}